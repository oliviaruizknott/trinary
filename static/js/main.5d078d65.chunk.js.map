{"version":3,"sources":["Cell.js","Letter.js","Diagram.js","Trinary.js","App.js","index.js"],"names":["Cell","value","fill","className","style","background","Letter","id","letter","colors","reverse","getFill","num","trinaryObject","reduce","previousValue","place","Math","trunc","numberInTrinaryObject","l","asNumber","toLowerCase","charCodeAt","convertToNumber","Diagram","string","split","map","i","gray","black","Trinary","useState","setString","color1","setColor1","color2","setColor2","showHelp","setShowHelp","type","name","onChange","e","target","height","scrollHeight","placeholder","onMouseEnter","onMouseLeave","color","onClick","newColor2","visibility","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d078d65.chunk.js","sourcesContent":["function Cell({ value, fill }) {\n  return <div className={`Cell fill-${value}`} style={{ background: `${fill}` }}></div>\n}\n\nexport default Cell;\n","import Cell from './Cell'\n\nfunction Letter({ id, letter, colors, reverse }) {\n  const convertToNumber = (l) => {\n    // Subtracting 96 from the charCode gets us to a = 1, z = 26, etc.\n    const asNumber = l.toLowerCase().charCodeAt(0) - 96\n\n    // If the character is anything other than a letter, just treat it as a\n    // space. The character will still be visible in the text, but a blank row\n    // will appear in the diagram.\n    if (asNumber < 1 || asNumber > 26) {\n      return 0;\n    }\n\n    return asNumber;\n  }\n\n  const numberInTrinaryObject = (num) => {\n    let trinaryPlaces = [9,3,1]\n    let trinaryObject = {}\n\n    const reducer = (previousValue, place) => {\n      trinaryObject[place] = Math.trunc(previousValue/place)\n      return num%place\n    }\n\n    trinaryPlaces.reduce(reducer, num)\n    return trinaryObject\n  }\n\n  const getFill = (num) => {\n    return colors[trinaryObject[num]]\n  }\n\n  const number = convertToNumber(letter)\n  const trinaryObject = numberInTrinaryObject(number)\n\n  return (\n    <div className={`Letter ${reverse ? \"reverse\" : \"\"}`}>\n      <Cell key={`${id}-9`} fill={getFill(9)} value={trinaryObject[9]}/>\n      <Cell key={`${id}-3`} fill={getFill(3)} value={trinaryObject[3]}/>\n      <Cell key={`${id}-1`} fill={getFill(1)} value={trinaryObject[1]}/>\n    </div>\n  )\n}\n\nexport default Letter;\n","import Letter from './Letter'\n\nfunction Diagram({ string, colors }) {\n  const renderLetters = () => {\n    let stringSplit = string.split(\"\")\n    return stringSplit.map((letter, i) => {\n      return (\n        <div key={i} className=\"diagramRow\">\n          <Letter key={i} id={i} letter={letter} colors={colors} />\n          <Letter key={`${i}-reverse`} id={`${i}-reverse`} letter={letter} colors={colors} reverse={true}/>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"Diagram\">\n      {renderLetters()}\n    </div>\n  )\n}\n\nexport default Diagram;\n","import React, { useState } from 'react'\nimport Diagram from './Diagram'\n\nconst gray = \"#808080\"\nconst black = \"#000000\"\n\nfunction Trinary ({ id }) {\n  const [string, setString] = useState(\"\")\n  const [color1, setColor1] = useState(gray)\n  const [color2, setColor2] = useState(black)\n  const colors = [\"FFFFFF\", color1, color2]\n  const [showHelp, setShowHelp] = useState(false)\n\n  const handleTextAreaChange = (e) => {\n    setString(e.target.value)\n\n    // these lines expand the textarea to the height of the content\n    e.target.style.height = \"\"\n    e.target.style.height = e.target.scrollHeight + \"px\"\n  }\n\n  const swapColors = () => {\n    const newColor1 = color2\n    const newColor2 = color1\n\n    setColor1(newColor1)\n    setColor2(newColor2)\n  }\n\n  const resetColors = () => {\n    setColor1(gray)\n    setColor2(black)\n  }\n\n  return (\n    <div id={id} className=\"Trinary\">\n      <textarea type=\"text\" name=\"string\" onChange={handleTextAreaChange} placeholder=\"enter text here\"/>\n      <br />\n      <div\n        onMouseEnter={(e) => setShowHelp(true)}\n        onMouseLeave={(e) => setShowHelp(false)}\n      >\n        <input type=\"text\" name=\"color1\" style={{ color: color1 }} onChange={(e) => setColor1(e.target.value)} value={color1} />\n        <input type=\"text\" name=\"color2\" style={{ color: color2 }} onChange={(e) => setColor2(e.target.value)} value={color2} />\n      </div>\n      <br />\n      <button type=\"button\" name=\"swap\" onClick={swapColors}>swap</button>\n      <button type=\"button\" name=\"reset\" onClick={resetColors}>reset</button>\n      <p style={{ color: gray, visibility: showHelp ? \"visible\" : \"hidden\" }}>\n        To change the colors, enter a hexcode (i.e. '#808000') or a CSS-recognized color name (i.e. 'olive').\n      </p>\n      <Diagram string={string} colors={colors} />\n    </div>\n  )\n}\n\nexport default Trinary;\n","import React, { useState } from 'react'\nimport Trinary from './Trinary'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Trinary />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}