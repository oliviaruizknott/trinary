{"version":3,"sources":["Cell.js","Letter.js","Diagram.js","App.js","index.js"],"names":["Cell","props","className","fill","Letter","letter","trinaryObject","num","reduce","previousValue","place","Math","trunc","numberInTrinaryObject","value","charCodeAt","toLowerCase","reverse","id","Diagram","string","split","map","i","App","useState","setString","type","name","onChange","e","target","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAIeA,MAJf,SAAcC,GACZ,OAAO,qBAAKC,UAAS,oBAAeD,EAAME,SCqC7BC,MApCf,SAAgBH,GACd,IAAyBI,EAuBnBC,EAdwB,SAACC,GAC7B,IACID,EAAgB,GAQpB,MAToB,CAAC,EAAE,EAAE,GAQXE,QALE,SAACC,EAAeC,GAE9B,OADAJ,EAAcI,GAASC,KAAKC,MAAMH,EAAcC,GACzCH,EAAIG,IAGiBH,GACvBD,EAIaO,CArBS,MAFNR,EAsBMJ,EAAMa,OApBxBC,WAAW,GACb,EAGFV,EAAOW,cAAcD,WAAW,GAAK,IAkBxCE,EAAUhB,EAAMgB,QAAU,UAAY,GAE5C,OACE,sBAAKf,UAAS,iBAAYe,GAA1B,UACE,cAAC,EAAD,CAA4Bd,KAAMG,EAAc,IAAhD,UAAcL,EAAMiB,GAApB,OACA,cAAC,EAAD,CAA4Bf,KAAMG,EAAc,IAAhD,UAAcL,EAAMiB,GAApB,OACA,cAAC,EAAD,CAA4Bf,KAAMG,EAAc,IAAhD,UAAcL,EAAMiB,GAApB,WCXSC,MApBf,SAAiBlB,GAaf,OACE,qBAAKC,UAAU,UAAf,SAZkBD,EAAMmB,OAAOC,MAAM,IAClBC,KAAI,SAACjB,EAAQkB,GAC9B,OACE,sBAAarB,UAAU,aAAvB,UACE,cAAC,EAAD,CAAgBgB,GAAIK,EAAGT,MAAOT,GAAjBkB,GACb,cAAC,EAAD,CAA6BL,GAAE,UAAKK,EAAL,YAAkBT,MAAOT,EAAQY,SAAS,GAAzE,UAAgBM,EAAhB,eAFQA,SCWHC,MAff,WACE,MAA4BC,mBAAS,IAArC,mBAAOL,EAAP,KAAeM,EAAf,KAMA,OACE,sBAAKxB,UAAU,MAAf,UACE,uBAAOyB,KAAK,OAAOC,KAAK,SAASC,SANhB,SAACC,GACpBJ,EAAUI,EAAEC,OAAOjB,QAKwCkB,YAAY,oBACrE,cAAC,EAAD,CAASZ,OAAQA,QCRvBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d0f77bb8.chunk.js","sourcesContent":["function Cell(props) {\n  return <div className={`Cell fill-${props.fill}`}></div>\n}\n\nexport default Cell;\n","import Cell from './Cell'\n\nfunction Letter(props) {\n  const convertToNumber = (letter) => {\n    // handle space\n    if (letter.charCodeAt(0) === 32) {\n      return 0\n    }\n\n    return letter.toLowerCase().charCodeAt(0) - 96\n  }\n\n  const numberInTrinaryObject = (num) => {\n    let trinaryPlaces = [9,3,1]\n    let trinaryObject = {}\n\n    const reducer = (previousValue, place) => {\n      trinaryObject[place] = Math.trunc(previousValue/place)\n      return num%place\n    }\n\n    trinaryPlaces.reduce(reducer, num)\n    return trinaryObject\n  }\n\n  const number = convertToNumber(props.value)\n  const trinaryObject = numberInTrinaryObject(number)\n  const reverse = props.reverse ? \"reverse\" : \"\"\n\n  return (\n    <div className={`Letter ${reverse}`}>\n      <Cell key={`${props.id}-9`} fill={trinaryObject[9]} />\n      <Cell key={`${props.id}-3`} fill={trinaryObject[3]} />\n      <Cell key={`${props.id}-1`} fill={trinaryObject[1]} />\n    </div>\n  )\n}\n\nexport default Letter;\n","import Letter from './Letter'\n\nfunction Diagram(props) {\n  const renderLetters = () => {\n    let stringSplit = props.string.split(\"\")\n    return stringSplit.map((letter, i) => {\n      return (\n        <div key={i} className=\"diagramRow\">\n          <Letter key={i} id={i} value={letter} />\n          <Letter key={`${i}-reverse`} id={`${i}-reverse`} value={letter} reverse={true}/>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"Diagram\">\n      {renderLetters()}\n    </div>\n  )\n}\n\nexport default Diagram;\n","import React, { useState } from 'react'\nimport Diagram from './Diagram'\n\nfunction App () {\n  const [string, setString] = useState(\"\")\n\n  const updateString = (e) => {\n    setString(e.target.value)\n  }\n\n  return (\n    <div className=\"App\">\n      <input type=\"text\" name=\"string\" onChange={updateString} placeholder=\"enter text here\"/>\n      <Diagram string={string} />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}