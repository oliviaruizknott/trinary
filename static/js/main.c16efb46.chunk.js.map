{"version":3,"sources":["Cell.js","Letter.js","Diagram.js","Trinary.js","App.js","index.js"],"names":["Cell","value","fill","className","style","background","replace","Letter","l","id","letter","colors","reverse","getFill","num","trinaryObject","reduce","previousValue","place","Math","trunc","numberInTrinaryObject","charCodeAt","toLowerCase","Diagram","string","split","map","i","Trinary","useState","setString","color1","setColor1","color2","setColor2","type","name","onChange","e","target","placeholder","color","onClick","newColor2","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAIeA,MAJf,YAAgC,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACrB,OAAO,qBAAKC,UAAS,oBAAeF,GAASG,MAAO,CAAEC,WAAW,IAAD,OAAMH,EAAKI,QAAQ,IAAK,SCwC3EC,MAvCf,YAAkD,IACvBC,EADTC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAuB9BC,EAAU,SAACC,GACf,OAAOH,EAAOI,EAAcD,KAIxBC,EAlBwB,SAACD,GAC7B,IACIC,EAAgB,GAQpB,MAToB,CAAC,EAAE,EAAE,GAQXC,QALE,SAACC,EAAeC,GAE9B,OADAH,EAAcG,GAASC,KAAKC,MAAMH,EAAcC,GACzCJ,EAAII,IAGiBJ,GACvBC,EAQaM,CAzBI,MAFDb,EA0BME,GAxBvBY,WAAW,GACR,EAGFd,EAAEe,cAAcD,WAAW,GAAK,IAuBzC,OACE,sBAAKnB,UAAS,iBAAYS,EAAU,UAAY,IAAhD,UACE,cAAC,EAAD,CAAsBV,KAAMW,EAAQ,GAAIZ,MAAOc,EAAc,IAA7D,UAAcN,EAAd,OACA,cAAC,EAAD,CAAsBP,KAAMW,EAAQ,GAAIZ,MAAOc,EAAc,IAA7D,UAAcN,EAAd,OACA,cAAC,EAAD,CAAsBP,KAAMW,EAAQ,GAAIZ,MAAOc,EAAc,IAA7D,UAAcN,EAAd,WCdSe,MApBf,YAAsC,IAAnBC,EAAkB,EAAlBA,OAAQd,EAAU,EAAVA,OAazB,OACE,qBAAKR,UAAU,UAAf,SAZkBsB,EAAOC,MAAM,IACZC,KAAI,SAACjB,EAAQkB,GAC9B,OACE,sBAAazB,UAAU,aAAvB,UACE,cAAC,EAAD,CAAgBM,GAAImB,EAAGlB,OAAQA,EAAQC,OAAQA,GAAlCiB,GACb,cAAC,EAAD,CAA6BnB,GAAE,UAAKmB,EAAL,YAAkBlB,OAAQA,EAAQC,OAAQA,EAAQC,SAAS,GAA1F,UAAgBgB,EAAhB,eAFQA,SCuBHC,MA3Bf,YAA2B,IAAPpB,EAAM,EAANA,GAClB,EAA4BqB,mBAAS,IAArC,mBAAOL,EAAP,KAAeM,EAAf,KACA,EAA4BD,mBAAS,WAArC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAA4BH,mBAAS,WAArC,mBAAOI,EAAP,KAAeC,EAAf,KACMxB,EAAS,CAAC,SAAUqB,EAAQE,GAUlC,OACE,sBAAKzB,GAAIA,EAAIN,UAAU,UAAvB,UACE,uBAAOiC,KAAK,OAAOC,KAAK,SAASC,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,OAAOvC,QAAQwC,YAAY,oBACzF,uBACA,uBAAOL,KAAK,OAAOC,KAAK,SAASjC,MAAO,CAAEsC,MAAOV,GAAUM,SAAU,SAACC,GAAD,OAAON,EAAUM,EAAEC,OAAOvC,QAAQA,MAAO+B,IAC9G,uBAAOI,KAAK,OAAOC,KAAK,SAASjC,MAAO,CAAEsC,MAAOR,GAAUI,SAAU,SAACC,GAAD,OAAOJ,EAAUI,EAAEC,OAAOvC,QAAQA,MAAOiC,IAC9G,wBAAQE,KAAK,SAASC,KAAK,OAAOM,QAdnB,WACjB,IACMC,EAAYZ,EAElBC,EAHkBC,GAIlBC,EAAUS,IASR,kBACA,uBACA,cAAC,EAAD,CAASnB,OAAQA,EAAQd,OAAQA,QCdxBkC,MARf,WACE,OACE,qBAAK1C,UAAU,MAAf,SACE,cAAC,EAAD,OCDN2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.c16efb46.chunk.js","sourcesContent":["function Cell({ value, fill }) {\n  return <div className={`Cell fill-${value}`} style={{ background: `#${fill.replace('#', '')}` }}></div>\n}\n\nexport default Cell;\n","import Cell from './Cell'\n\nfunction Letter({ id, letter, colors, reverse }) {\n  const convertToNumber = (l) => {\n    // handle space\n    if (l.charCodeAt(0) === 32) {\n      return 0\n    }\n\n    return l.toLowerCase().charCodeAt(0) - 96\n  }\n\n  const numberInTrinaryObject = (num) => {\n    let trinaryPlaces = [9,3,1]\n    let trinaryObject = {}\n\n    const reducer = (previousValue, place) => {\n      trinaryObject[place] = Math.trunc(previousValue/place)\n      return num%place\n    }\n\n    trinaryPlaces.reduce(reducer, num)\n    return trinaryObject\n  }\n\n  const getFill = (num) => {\n    return colors[trinaryObject[num]]\n  }\n\n  const number = convertToNumber(letter)\n  const trinaryObject = numberInTrinaryObject(number)\n\n  return (\n    <div className={`Letter ${reverse ? \"reverse\" : \"\"}`}>\n      <Cell key={`${id}-9`} fill={getFill(9)} value={trinaryObject[9]}/>\n      <Cell key={`${id}-3`} fill={getFill(3)} value={trinaryObject[3]}/>\n      <Cell key={`${id}-1`} fill={getFill(1)} value={trinaryObject[1]}/>\n    </div>\n  )\n}\n\nexport default Letter;\n","import Letter from './Letter'\n\nfunction Diagram({ string, colors }) {\n  const renderLetters = () => {\n    let stringSplit = string.split(\"\")\n    return stringSplit.map((letter, i) => {\n      return (\n        <div key={i} className=\"diagramRow\">\n          <Letter key={i} id={i} letter={letter} colors={colors} />\n          <Letter key={`${i}-reverse`} id={`${i}-reverse`} letter={letter} colors={colors} reverse={true}/>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"Diagram\">\n      {renderLetters()}\n    </div>\n  )\n}\n\nexport default Diagram;\n","import React, { useState } from 'react'\nimport Diagram from './Diagram'\n\nfunction Trinary ({ id }) {\n  const [string, setString] = useState(\"\")\n  const [color1, setColor1] = useState(\"#808080\") // gray\n  const [color2, setColor2] = useState(\"#000000\") // black\n  const colors = [\"FFFFFF\", color1, color2]\n\n  const swapColors = () => {\n    const newColor1 = color2\n    const newColor2 = color1\n\n    setColor1(newColor1)\n    setColor2(newColor2)\n  }\n\n  return (\n    <div id={id} className=\"Trinary\">\n      <input type=\"text\" name=\"string\" onChange={(e) => setString(e.target.value)} placeholder=\"enter text here\"/>\n      <br />\n      <input type=\"text\" name=\"color1\" style={{ color: color1 }} onChange={(e) => setColor1(e.target.value)} value={color1} />\n      <input type=\"text\" name=\"color2\" style={{ color: color2 }} onChange={(e) => setColor2(e.target.value)} value={color2} />\n      <button type=\"button\" name=\"swap\" onClick={swapColors}>swap</button>\n      <br />\n      <Diagram string={string} colors={colors} />\n    </div>\n  )\n}\n\nexport default Trinary;\n","import React, { useState } from 'react'\nimport Trinary from './Trinary'\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Trinary />\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}