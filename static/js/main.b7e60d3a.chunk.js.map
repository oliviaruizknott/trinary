{"version":3,"sources":["Cell.js","utils.js","Letter.js","About.js","Diagram.js","Trinary.js","App.js","index.js"],"names":["Cell","value","fill","className","style","background","convertToNumber","l","validate","asNumber","toLowerCase","charCodeAt","isNaN","numberInTrinaryObject","num","trinaryObject","reduce","previousValue","place","Math","trunc","Letter","id","letter","colors","reverse","getFill","number","About","closeAbout","useState","string","setString","type","name","onChange","e","target","placeholder","maxLength","href","rel","Diagram","split","map","i","gray","black","Trinary","color1","setColor1","color2","setColor2","showHelp","setShowHelp","height","scrollHeight","onMouseEnter","onMouseLeave","color","onClick","newColor2","visibility","App","showAbout","setShowAbout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7e60d3a.chunk.js","sourcesContent":["function Cell({ value, fill }) {\n  return <div className={`Cell fill-${value}`} style={{ background: `${fill}` }}></div>\n}\n\nexport default Cell;\n","export const convertToNumber = (l, validate) => {\n  // Subtracting 96 from the charCode gets us to a = 1, z = 26, etc.\n  const asNumber = l.toLowerCase().charCodeAt(0) - 96\n\n  // If the character is anything other than a letter, just treat it as a\n  // space. The character will still be visible in the text, but a blank row\n  // will appear in the diagram.\n  if (asNumber < 1 || asNumber > 26 || isNaN(asNumber)) {\n    return 0;\n  }\n\n  return asNumber;\n}\n\nexport const numberInTrinaryObject = (num) => {\n  let trinaryPlaces = [9,3,1]\n  let trinaryObject = {}\n\n  const reducer = (previousValue, place) => {\n    trinaryObject[place] = Math.trunc(previousValue/place)\n    return num%place\n  }\n\n  trinaryPlaces.reduce(reducer, num)\n  return trinaryObject\n}\n","import Cell from './Cell'\nimport { convertToNumber, numberInTrinaryObject } from './utils'\n\nfunction Letter({ id, letter, colors, reverse }) {\n  const getFill = (num) => {\n    return colors[trinaryObject[num]]\n  }\n\n  const number = convertToNumber(letter)\n  const trinaryObject = numberInTrinaryObject(number)\n\n  return (\n    <div className={`Letter ${reverse ? \"reverse\" : \"\"}`}>\n      <Cell key={`${id}-9`} fill={getFill(9)} value={trinaryObject[9]}/>\n      <Cell key={`${id}-3`} fill={getFill(3)} value={trinaryObject[3]}/>\n      <Cell key={`${id}-1`} fill={getFill(1)} value={trinaryObject[1]}/>\n    </div>\n  )\n}\n\nexport default Letter;\n","import React, { useState } from 'react'\nimport Letter from './Letter'\nimport { convertToNumber, numberInTrinaryObject } from './utils'\n\nfunction About ({ closeAbout }) {\n  const [string, setString] = useState(\" \")\n  const colors = [\"FFFFFF\", \"#808080\", \"#000000\"]\n\n  const trinaryAsNumber = (trinaryObject) => {\n    return `${trinaryObject[9]}${trinaryObject[3]}${trinaryObject[1]}`\n  }\n\n  return (\n    <div className=\"About\">\n      <p>I made this one weekend while trying to come up with abstract-looking artwork that could hold secret meaning. Maybe one day I’ll write a message and use this to design a massive tapestry to hang on our wall, and you’ll be in on it.</p>\n      <p>Here’s how it works:</p>\n      <input type=\"text\" name=\"string\" onChange={(e) => setString(e.target.value)} placeholder=\"type any letter here\" maxLength=\"1\"/>\n      <p>Each letter you enter is converted to a number: A = 1, B = 2, C = 3, all the way down to Z = 26. So your letter becomes:</p>\n      <p>{convertToNumber(string, true)}</p>\n      <p>That number is then converted into it’s base 3 representation. What does that mean? You and I are used to a base 10 number system: it starts at zero, walks all the way up to nine—and then you put a one in a new column (the “tens place”) to say that there’s one ten here, plus whatever other number is in the “ones place”, where you start all over at zero.</p>\n      <p>A base 3 system is the same, except with threes! It starts at zero, walks up to two—and then you put a one in a new column (the “threes place”) to say that there’s one three here, plus whatever other number is in the “ones place”, where you start all over at zero. Just like ten tens make one hundred and you have to start a new column, three threes make a nine and you start a new column, too.</p>\n      <p>So your letter-turned-number becomes:</p>\n      <p>{trinaryAsNumber(numberInTrinaryObject(convertToNumber(string)))}</p>\n      <p>or:</p>\n      <table>\n        <tr>\n          <th>9s</th>\n          <th>3s</th>\n          <th>1s</th>\n        </tr>\n        <tr>\n          <td>{numberInTrinaryObject(convertToNumber(string))[9]}</td>\n          <td>{numberInTrinaryObject(convertToNumber(string))[3]}</td>\n          <td>{numberInTrinaryObject(convertToNumber(string))[1]}</td>\n        </tr>\n      </table>\n      <p>Each of those digits is represented by a square with a different filling determined by it’s value: white = 0; gray = 1; black = 2.</p>\n      <p>Your letter (outlined for visibility) looks like:</p>\n      { string &&\n        <div className=\"aboutDisplay\">\n          <Letter id=\"0\" letter={string} colors={colors} />\n        </div>\n      }\n      { !string &&\n        <div className=\"aboutDisplay\">\n          <Letter id=\"0\" letter={\" \"} colors={colors} />\n        </div>\n      }\n      <p>And then we just add the same thing in reverse to get that nice symmetry:</p>\n      { string &&\n        <div className=\"aboutDisplay diagramRow\">\n          <Letter key=\"1\" id=\"1\" letter={string} colors={colors} />\n          <Letter key=\"1-reverse\" id=\"1-reverse\" letter={string} colors={colors} reverse={true}/>\n        </div>\n      }\n      { !string &&\n        <div className=\"aboutDisplay diagramRow\">\n          <Letter key=\"1\" id=\"1\" letter={\" \"} colors={colors} />\n          <Letter key=\"1-reverse\" id=\"1-reverse\" letter={\" \"} colors={colors} reverse={true}/>\n        </div>\n      }\n      <p>Great job!</p>\n      <p>Now go back and type all sorts of words and sentences and see what shapes they make.</p>\n      <p>(Some of my favorites so far are: “december”, “twelve”, “twenty”, “fourteen”, “notion”, and of course “livvy”.)</p>\n      <p>Conceptualized, designed, and built by Livvy. Typeface by Ivan. A project of <a href=\"https://ruiz-knott.com\" className=\"clickable\">Ruiz & Knott.</a></p>\n      <p>P.S. If you like this, you might like <a className=\"clickable\" href=\"https://ruiz-knott.notion.site/obscured_data-aae285e2f7524780a4c92ec40eb1b6e8\" target=\"_blank\" rel=\"noopener noreferrer\">@obscured_data.</a></p>\n    </div>\n  )\n}\n\nexport default About;\n","import Letter from './Letter'\n\nfunction Diagram({ string, colors }) {\n  const renderLetters = () => {\n    let stringSplit = string.split(\"\")\n    return stringSplit.map((letter, i) => {\n      return (\n        <div key={i} className=\"diagramRow\">\n          <Letter key={i} id={i} letter={letter} colors={colors} />\n          <Letter key={`${i}-reverse`} id={`${i}-reverse`} letter={letter} colors={colors} reverse={true}/>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"Diagram\">\n      {renderLetters()}\n    </div>\n  )\n}\n\nexport default Diagram;\n","import React, { useState } from 'react'\nimport Diagram from './Diagram'\n\nconst gray = \"#808080\"\nconst black = \"#000000\"\n\nfunction Trinary ({ id }) {\n  const [string, setString] = useState(\"\")\n  const [color1, setColor1] = useState(gray)\n  const [color2, setColor2] = useState(black)\n  const colors = [\"FFFFFF\", color1, color2]\n  const [showHelp, setShowHelp] = useState(false)\n\n  const handleTextAreaChange = (e) => {\n    setString(e.target.value)\n\n    // these lines expand the textarea to the height of the content\n    e.target.style.height = \"\"\n    e.target.style.height = e.target.scrollHeight + \"px\"\n  }\n\n  const swapColors = () => {\n    const newColor1 = color2\n    const newColor2 = color1\n\n    setColor1(newColor1)\n    setColor2(newColor2)\n  }\n\n  const resetColors = () => {\n    setColor1(gray)\n    setColor2(black)\n  }\n\n  return (\n    <div id={id} className=\"Trinary\">\n      <textarea type=\"text\" name=\"string\" onChange={handleTextAreaChange} placeholder=\"enter text here\"/>\n      <br />\n      <div\n        onMouseEnter={(e) => setShowHelp(true)}\n        onMouseLeave={(e) => setShowHelp(false)}\n      >\n        <input type=\"text\" name=\"color1\" style={{ color: color1 }} onChange={(e) => setColor1(e.target.value)} value={color1} aria-label=\"input for color 1\"/>\n        <input type=\"text\" name=\"color2\" style={{ color: color2 }} onChange={(e) => setColor2(e.target.value)} value={color2} aria-label=\"input for color 2\"/>\n      </div>\n      <br />\n      <button type=\"button\" name=\"swap\" onClick={swapColors}>swap</button>\n      <button type=\"button\" name=\"reset\" onClick={resetColors}>reset</button>\n      <p style={{ color: gray, visibility: showHelp ? \"visible\" : \"hidden\" }}>\n        To change the colors, enter a hexcode (i.e. '#808000') or a CSS-recognized color name (i.e. 'olive').\n      </p>\n      <Diagram string={string} colors={colors} />\n    </div>\n  )\n}\n\nexport default Trinary;\n","import React, { useState } from 'react'\nimport About from './About'\nimport Trinary from './Trinary'\n\nfunction App () {\n  const [showAbout, setShowAbout] = useState(false)\n\n  return (\n    <div className=\"App\">\n      {!showAbout && <Trinary />}\n      {showAbout && <About closeAbout={(e) => setShowAbout(false)}/>}\n      <button className=\"aboutButton clickable\" onClick={(e) => setShowAbout(!showAbout)}>{showAbout ? \"← back\" : \"about\"}</button>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}